---

- name: Restrict permissions on nginx configuration dir
  ansible.builtin.file:
    dest: "/etc/nginx"
    mode: "0750"
    state: "directory"
    owner: "root"
    group: "{{ www_user }}"
- name: Restrict permissions on few nginx configuration files
  ansible.builtin.file:
    dest: "{{ item }}"
    mode: "0640"
    state: "file"
    owner: "root"
    group: "{{ www_user }}"
    follow: "yes"
  with_items:
    - /etc/nginx/nginx.conf

- name: HTTP Public Key Pinning (HPKP) hash extraction
  ansible.builtin.shell: |
    set -o pipefail
    openssl req -in {{ ssl_dir }}/{{ ansible_fqdn }}.csr -pubkey -noout |
      openssl rsa -pubin -outform der |
      openssl dgst -sha256 -binary |
      openssl enc -base64
  args:
    executable: /bin/bash
  register: hardenwebserver_cert_pinning_value
  changed_when: false
  when: harden_nginx_hpkp_enable

- name: Nginx configuration file update
  ansible.builtin.template:
    src: "harden-cache"
    dest: "{{ apache_confdir }}/harden-cache{{ nginx_conf_suffix }}"
    owner: "0"
    group: "0"
    mode: "0644"

- name: Review nginx main configuration
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ apache_confdir }}/{{ item }}{{ nginx_conf_suffix }}"
    mode: '0644'
  with_items:
    - harden-nginx-server
    - harden-nginx-gzip

## centos7 = nginx 1.12. location" directive is not allowed here in /etc/nginx/conf.d/harden-nginx-limit_req.conf
- name: Enable nginx limit_req - nginx-full only
  ansible.builtin.template:
    src: harden-nginx-limit_req.j2
    dest: "{{ apache_confdir }}/../harden-nginx-limit_req"
    mode: '0644'
  when: >
    hardenwebserver_nginx_debian_pkg == 'nginx-full' or
    (ansible_os_family == 'RedHat' and ansible_distribution_major_version | int > 7)

- name: Ensure extra configs are present
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ apache_confdir }}/../{{ item.name }}{{ nginx_conf_suffix }}"
    mode: '0644'
  notify:
    - Restart nginx
  with_items: "{{ hardenwebserver_nginx_https_server_include }}"

- name: Harden template for tls servers, common, fastcgi
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ apache_confdir }}/../{{ item }}"
    mode: '0644'
  with_items:
    - harden-nginx-https
    - harden-nginx-common
    - harden-nginx-fastcgi_params

## size should be >= certificate key size
- name: Generate ssl dhparam key
  # command: "openssl dhparam -out {{ ssl_privatedir }}/dhparam4.pem 4096 creates=/etc/nginx/ssl/dhparam4.pem"
  ansible.builtin.command: >
    openssl dhparam -dsaparam -out {{ ssl_privatedir }}/dhparam4.pem 4096
  args:
    creates: "{{ ssl_privatedir }}/dhparam4.pem"
- name: Ensure good permissions for ssl dhparam key
  ansible.builtin.file:
    dest: "{{ ssl_privatedir }}/dhparam4.pem"
    mode: "0440"
    owner: "root"
    group: "{{ www_user }}"

- name: Single site
  when:
    - hardenwebserver_sites is not defined or hardenwebserver_sites == []
  block:
    - name: Single Https site
      ansible.builtin.include_tasks: nginx-https-sites.yml
      vars:
        site_server_name: "{{ hardenwebserver_target_host_cn }}"
        site_defaultname: default
        site_httpsname: https
        site_defaultfile: "/etc/nginx/sites-available/default"
- name: Multi sites
  when:
    - hardenwebserver_sites is defined
    - hardenwebserver_sites != []
  block:
    - name: Debug
      ansible.builtin.debug:
        var: hardenwebserver_sites
        verbosity: 1
    - name: Remove duplicate config links
      ansible.builtin.file:
        name: "{{ item }}"
        state: absent
      loop:
        - /etc/nginx/sites-enabled/default
        - /etc/nginx/sites-enabled/https
    - name: "Https sites - {{ site_server_name }}"
      ansible.builtin.include_tasks: nginx-https-sites.yml
      vars:
        site_server_name: "{{ outer_item.server_name }}"
        site_defaultname: "{{ outer_item.server_name }}-default"
        site_defaultfile: "/etc/nginx/sites-available/{{ outer_item.server_name }}-default"
        site_httpsname: "{{ outer_item.server_name }}-https"
        harden_nginx_http_listen: "{{ outer_item.listen | default(omit) }}"
        harden_nginx_https_listen: "{{ outer_item.listen | default(omit) }}"
        harden_nginx_https_port: "{{ outer_item.listen_port | default('443') }}"
        hardenwebserver_https_template: "{{ outer_item.site_template }}"
        hardenwebserver_cert: "{{ outer_item.cert_type }}"
        cert_san: "{{ outer_item.cert_san }}"
        hardenwebserver_target_host_san: "{{ outer_item.cert_san }}"
        hardenwebserver_rootdir: "{{ outer_item.rootdir }}"
        hardenwebserver_nginx_https_server_include: "{{ outer_item.https_server_include }}"
        hardenwebserver_disable_http: "{{ outer_item.disable_http | default(true) }}"
      loop_control:
        loop_var: outer_item
      loop: "{{ hardenwebserver_sites }}"

- name: Import fail2ban
  ansible.builtin.import_tasks: fail2ban.yml
  when: hardennginx_fail2ban_enable
