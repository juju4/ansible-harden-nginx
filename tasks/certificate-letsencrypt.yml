---
# https://docs.ansible.com/ansible/latest/modules/acme_certificate_module.html
# https://docs.ansible.com/ansible/latest/modules/openssl_csr_module.html

- name: apt | certificate packages dependencies
  apt: name=ssl-cert state=present update_cache=yes cache_valid_time=3600
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  register: pkg_result
  until: pkg_result is success
- name: install deps
  package: name=openssl state=present
  register: pkg_result
  until: pkg_result is success

- name: Generate an OpenSSL private key for letsencrypt
  openssl_privatekey:
    path: "{{ ssl_privatedir }}/user.key"
    size: 4096
  when: hardenwebserver_letsencrypt_user_key is not defined or not hardenwebserver_letsencrypt_user_key

- name: Debug | hardenwebserver_letsencrypt_acme_dir var
  debug: var=hardenwebserver_letsencrypt_acme_dir
- name: Ensure have letsencrypt account
  acme_account:
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"
    acme_version: 2
    # account_key_src: "{{ hardenwebserver_letsencrypt_user_key | default(ssl_privatedir + '/user.key') }}"
    account_key_src: "{{ ssl_privatedir }}/user.key"
    state: present
    terms_agreed: yes
    contact:
      - "mailto:{{ hardenwebserver_letsencrypt_email }}"

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  openssl_privatekey:
    path: "{{ ssl_privatedir }}/{{ ansible_fqdn }}.key"
    size: 4096
    backup: "{{ hardenwebserver_backup | default(true) }}"

- name: Generate an OpenSSL Certificate Signing Request with Subject information
  openssl_csr:
    path: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    privatekey_path: "{{ ssl_privatedir }}/{{ ansible_fqdn }}.key"
    country_name: "{{ hardenwebserver_letsencrypt_country | default('US') }}"
    organization_name: "{{ hardenwebserver_letsencrypt_org_name }}"
    email_address: "{{ hardenwebserver_letsencrypt_email }}"
    common_name: "{{ certificate_cn }}"
    subject_alt_name: "{{ hardenwebserver_letsencrypt_san | default(omit) }}"
    backup: "{{ hardenwebserver_backup | default(true) }}"
    # defaults
    # digest: sha256

- name: register letsencrypt challenge
  acme_certificate:
    account_key: "{{ ssl_privatedir }}/user.key"
    acme_version: 2
    csr: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    dest: "{{ ssl_dir }}/{{ ansible_fqdn }}.crt"
    fullchain_dest: "{{ ssl_dir }}/ca-certs.pem"
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"
  register: le_challenge
  notify:
    - add public file to www dir to fullfill letsencrypt challenge

# - debug: var=le_challenge
- name: ensure letsencrypt directory exists
  file: "dest={{ hardenwebserver_rootdir }}/.well-known/acme-challenge state=directory mode=0755"

- name: Flush handlers
  meta: flush_handlers

## Note: validation is over http... can't remove http before this task.
- name: validate letsencrypt challenge
  acme_certificate:
    account_key: "{{ ssl_privatedir }}/user.key"
    acme_version: 2
    csr: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    dest: "{{ ssl_dir }}/{{ ansible_fqdn }}.crt"
    fullchain_dest: "{{ ssl_dir }}/ca-certs.pem"
    data: "{{ le_challenge }}"
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"
