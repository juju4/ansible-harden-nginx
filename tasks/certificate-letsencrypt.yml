---
# https://docs.ansible.com/ansible/latest/modules/acme_certificate_module.html
# https://docs.ansible.com/ansible/latest/modules/openssl_csr_module.html

- name: Update ssl path for letsencrypt
  ansible.builtin.set_fact:
    ssl_privatedir: "/etc/letsencrypt/live/{{ ansible_fqdn }}"
    ssl_dir: "/etc/letsencrypt/live/{{ ansible_fqdn }}"
    ssl_privkey: "/etc/letsencrypt/live/{{ ansible_fqdn }}/privkey.pem"
    ssl_crt: "/etc/letsencrypt/live/{{ ansible_fqdn }}/cert.pem"
    ssl_fullchain: "/etc/letsencrypt/live/{{ ansible_fqdn }}/fullchain.pem"

- name: Fatal localhost
  ansible.builtin.fail:
    msg: "Fatal! certificate_cn set as localhost. Review and use hardenwebserver_target_host_cn"
  when:
    - certificate_cn == 'localhost'

- name: Debian | certificate packages dependencies
  ansible.builtin.apt:
    name: "ssl-cert"
    state: "present"
    update_cache: "yes"
    cache_valid_time: "3600"
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  register: pkg_result
  until: pkg_result is success
- name: Install deps
  ansible.builtin.package:
    name: openssl
    state: present
  register: pkg_result
  until: pkg_result is success

- name: Ensure directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
  loop:
    - "{{ ssl_privatedir }}"
    - "{{ ssl_dir }}"

- name: Specific Root CA
  when:
    - hardenwebserver_acme_download_root_ca | bool
  block:
    - name: Download Root CA
      ansible.builtin.get_url:
        url: "{{ hardenwebserver_acme_download_root_ca_url }}"
        dest: "/tmp/{{ hardenwebserver_acme_download_root_ca_url | basename }}"
        mode: '0644'
        validate_certs: "{{ hardenwebserver_acme_validate_certs | bool }}"
    - name: Add Root CA to system
      ansible.builtin.copy:
        src: "/tmp/{{ hardenwebserver_acme_download_root_ca_url | basename }}"
        dest: /usr/share/ca-certificates
        mode: '0644'
        owner: root
        remote_src: true
      notify:
        - Add to /etc/ca-certificates.conf
        - Update-ca-certificates
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

- name: Check if existing user private key
  ansible.builtin.stat:
    path: "{{ ssl_privatedir }}/user.key"
  register: userkey

- name: Generate an OpenSSL private key for letsencrypt
  community.crypto.openssl_privatekey:
    path: "{{ ssl_privatedir }}/user.key"
    size: 4096
  when:
    - hardenwebserver_letsencrypt_user_key is not defined or not hardenwebserver_letsencrypt_user_key
    - not userkey.stat.exists

- name: Debug | hardenwebserver_letsencrypt_acme_dir var
  ansible.builtin.debug:
    var: hardenwebserver_letsencrypt_acme_dir
- name: Ensure have letsencrypt account
  community.crypto.acme_account:
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"
    acme_version: 2
    # account_key_src: "{{ hardenwebserver_letsencrypt_user_key | default(ssl_privatedir + '/user.key') }}"
    account_key_src: "{{ ssl_privatedir }}/user.key"
    state: present
    terms_agreed: yes
    contact:
      - "mailto:{{ hardenwebserver_letsencrypt_email }}"
    validate_certs: "{{ hardenwebserver_acme_validate_certs | bool }}"

- name: Check if existing host private key
  ansible.builtin.stat:
    path: "{{ ssl_privkey }}"
  register: hostkey

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  community.crypto.openssl_privatekey:
    path: "{{ ssl_privkey }}"
    size: 4096
    backup: "{{ hardenwebserver_backup | default(true) }}"
  when: not hostkey.stat.exists

- name: Generate an OpenSSL Certificate Signing Request with Subject information
  community.crypto.openssl_csr:
    path: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    privatekey_path: "{{ ssl_privkey }}"
    country_name: "{{ hardenwebserver_letsencrypt_country | default('US') }}"
    organization_name: "{{ hardenwebserver_letsencrypt_org_name }}"
    email_address: "{{ hardenwebserver_letsencrypt_email }}"
    common_name: "{{ certificate_cn }}"
    subject_alt_name: "{{ hardenwebserver_letsencrypt_san | default(omit) }}"
    backup: "{{ hardenwebserver_backup | default(true) }}"
    # defaults
    # digest: sha256

- name: Register letsencrypt challenge
  community.crypto.acme_certificate:
    account_key: "{{ ssl_privatedir }}/user.key"
    acme_version: 2
    csr: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    dest: "{{ ssl_crt }}"
    fullchain_dest: "{{ ssl_fullchain }}"
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"
    validate_certs: "{{ hardenwebserver_acme_validate_certs | bool }}"
  register: le_challenge
  notify:
    - Add public file to www dir to fulfill letsencrypt challenge

# - debug: var=le_challenge
- name: Ensure letsencrypt directory exists
  ansible.builtin.file:
    dest: "{{ hardenwebserver_rootdir | default(_hardenwebserver_rootdir) }}/.well-known/acme-challenge"
    state: "directory"
    mode: "0755"

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

## Note: validation is over http... can't remove http before this task.
- name: Validate letsencrypt challenge
  community.crypto.acme_certificate:
    account_key: "{{ ssl_privatedir }}/user.key"
    acme_version: 2
    csr: "{{ ssl_dir }}/{{ ansible_fqdn }}.csr"
    dest: "{{ ssl_crt }}"
    fullchain_dest: "{{ ssl_fullchain }}"
    data: "{{ le_challenge }}"
    acme_directory: "{{ hardenwebserver_letsencrypt_acme_dir }}"
    validate_certs: "{{ hardenwebserver_acme_validate_certs | bool }}"
